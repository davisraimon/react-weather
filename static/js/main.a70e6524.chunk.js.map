{"version":3,"sources":["components/weather.component.js","components/form.component.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","className","city","country","icon","temp","minTemp","maxTemp","min","max","desc","Form","error","role","invalid","onSubmit","getWeather","type","name","autoComplete","placeholder","App","e","a","preventDefault","target","elements","value","fetch","api_call","json","response","console","log","cod","setState","sys","convertToCelsius","main","temp_min","temp_max","weather","description","getWeatherIcon","weatherIcon","id","state","undefined","thunderstorm","snow","rain","drizzle","clear","clouds","atmosphere","weatherIcons","this","Math","floor","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a70e6524.chunk.js","sourcesContent":["import React from 'react'\n\nconst Weather = (props) => {\n    return(\n        <div className=\"container\">\n            <div className=\"cards py-4\">\n                <h1>{props.city}   {props.country}</h1>\n                <h5 className='py-4'><i className={`wi ${props.icon} display-1`}></i></h5>\n                {props.temp?<h1 className='py-4'>{props.temp}&deg;</h1>:null}\n                {props.minTemp&&props.maxTemp?minmaxTemp(props.minTemp,props.maxTemp):null}\n                <h4 className='py-3'>{props.desc}</h4>\n            </div>\n        </div>\n    )\n}\nfunction minmaxTemp(min,max){\n    return(\n        <h3>\n            <span className=\"px-4\">{min}&deg;</span>\n            <span className=\"px-4\">{max}&deg;</span>\n        </h3>\n    )\n}\n\nexport default Weather","import React from 'react';\n\nconst Form = (props) => {\n    return(\n        <div className='container py-4'>\n            <div>{props.error?error():null}</div>\n            <div>{props.invalid?invalid():null}</div>\n            <form onSubmit={props.getWeather}>\n            <div className=\"row\">\n                <div className=\"col-md-3 offset-md-4 py-1\">\n                    <input type='text' className='form-control' name='city' autoComplete='off' placeholder=\"City\"></input>\n                </div>\n                <div className=\"col-md-3 py-1\">\n                    <button className='btn btn-primary mt-md-0 text-md-left'>Get Weather</button>\n                </div>\n            </div>\n            </form>\n        </div>\n    )\n}\n\nfunction error(){\n    return(\n        <div className=\"alert alert-warning mx5\" role=\"alert\">\n            Please Enter a City\n        </div>\n    )\n}\nfunction invalid(){\n    return(\n        <div className=\"alert alert-danger mx5\" role=\"alert\">\n            Please Enter a Valid City\n        </div>\n    )\n}\nexport default Form;","import React from 'react';\nimport './App.css';\nimport Weather from './components/weather.component'\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport 'weather-icons/css/weather-icons.css'\nimport Form from './components/form.component'\n\n\n\n\nclass App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n    city : undefined,\n    country : undefined,\n    temp : undefined,\n    desc : undefined,\n    minTemp : undefined,\n    maxTemp : undefined,\n    icon : undefined,\n    error : false,\n    invalid : false\n    }\n    this.weatherIcon={\n      thunderstorm : \"wi-thunderstorm\",\n      snow : \"wi-snow\",\n      rain : \"wi-storm-showers\",\n      drizzle : \"wi-sleet\",\n      clear : \"wi-day-sunny\",\n      clouds : \"wi-day-fog\",\n      atmosphere : \"wi-fog\" \n    }\n  }\n  getWeatherIcon(weatherIcons,id){  \n    switch(true){\n      case id>=200&&id<=232:\n        this.setState({ icon:weatherIcons.thunderstorm  });\n        break;\n      case id>=300&&id<=321: \n        this.setState({ icon:weatherIcons.drizzle  });\n        break;\n      case id>=500&&id<=531:\n        this.setState({ icon:weatherIcons.rain  });\n        break;\n      case id>=600&&id<=622:     \n        this.setState({ icon:weatherIcons.snow  });\n        break;\n      case id>=700&&id<=781:     \n        this.setState({ icon:weatherIcons.atmosphere  });\n        break;\n      case id===800:     \n        this.setState({ icon:weatherIcons.clear  });\n        break;    \n      case id>=800&&id<=804:     \n        this.setState({ icon:weatherIcons.clouds  });\n        break;\n      default:\n        this.setState({ icon:weatherIcons.clear  });\n        break;      \n    }\n    \n  }\n  getWeather = async (e) =>{\n    e.preventDefault();\n    const city = e.target.elements.city.value\n    if(city){\n    const api_call = await fetch(`//api.openweathermap.org/data/2.5/weather?q=${city}&appid=024cc63f5397c4eeaeedb5582456d428`);\n    const response = await api_call.json();\n    console.log(response.cod)\n    if(response.cod===200){\n    this.setState({\n      city:response.name,\n      country:response.sys.country,\n      temp:this.convertToCelsius(response.main.temp),\n      minTemp:this.convertToCelsius(response.main.temp_min),\n      maxTemp:this.convertToCelsius(response.main.temp_max),\n      desc:response.weather[0].description,\n      error:false,\n      invalid:false\n    })\n    this.getWeatherIcon(this.weatherIcon,response.weather[0].id)\n    }else{\n      this.setState({ invalid:true  }); \n      this.setState({ error:false  }); \n    }\n    }else{\n      this.setState({ error:true  });\n      this.setState({ invalid:false  });\n    }\n  }\n  \n  convertToCelsius(temp){\n  return   Math.floor(temp-273.15)\n  }\nrender(){\n  return(\n    <div className=\"App\">\n      <Form getWeather={this.getWeather} error={this.state.error} invalid={this.state.invalid}></Form>\n      <Weather \n      city={this.state.city}\n      country={this.state.country}\n      temp={this.state.temp}\n      minTemp={this.state.minTemp}\n      maxTemp={this.state.maxTemp}\n      desc={this.state.desc}\n      icon={this.state.icon}\n      ></Weather>\n    </div>\n  )\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}